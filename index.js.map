{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '48661000-87492d5612d6e41eb1a42ef3d';\nconst BASE_URL = 'https://pixabay.com/api/';\n\nexport async function fetchImages(query) {\n  try {\n    // Формируем URL для запроса\n    const response = await axios.get(BASE_URL, {\n      params: {\n        key: API_KEY,\n        q: query,  // Ищем по запросу\n        image_type: 'photo',  // Только фотографии\n        orientation: 'horizontal',  // Горизонтальные фотографии\n        safesearch: true  // Фильтр безопасности\n      },\n    });\n\n    console.log(\"API Response:\", response);  // Логируем данные\n\n    // Проверяем, есть ли изображения\n    if (response.data.totalHits > 0) {\n      return response.data.hits;  // Возвращаем изображения\n    } else {\n      console.warn('No images found.');\n      return [];\n    }\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n}\n\n\n\n\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst gallery = document.querySelector('.gallery');\n\nconst lightbox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\nexport function renderImages(images) {\n  gallery.innerHTML = ''; // Очистка галереи перед добавлением новых изображений\n\n  if (images.length === 0) {\n    showErrorMessage();\n    return;\n  }\n\n  const markup = images.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => `\n    <div class=\"gallery-item\">\n      <a href=\"${largeImageURL}\">\n        <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n      </a>\n      <div class=\"image-info\">\n        <p><span class=\"label\">Likes</span> <span class=\"count\">${likes}</span></p>\n        <p><span class=\"label\">Views</span> <span class=\"count\">${views}</span></p>\n        <p><span class=\"label\">Comments</span> <span class=\"count\">${comments}</span></p>\n        <p><span class=\"label\">Downloads</span> <span class=\"count\">${downloads}</span></p>\n      </div>\n    </div>\n  `).join('');\n\n  gallery.innerHTML = markup;\n\n  lightbox.refresh(); // Обновляем lightbox после вставки изображений\n}\n\nexport function showErrorMessage() {\n  gallery.innerHTML = `\n    <p class=\"error-message\">\n      Sorry, no images match your search. Please try again!\n    </p>\n  `;\n}\n","import { fetchImages } from './js/pixabay-api.js';\nimport { renderImages } from './js/render-functions.js';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst gallery = document.querySelector('.gallery');\nconst form = document.querySelector('.search-form');\n\nconst lightbox = new SimpleLightbox('.gallery a', {\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\n// Загрузка изображений по умолчанию (например, \"cats\")\nasync function loadDefaultImages() {\n  try {\n    const images = await fetchImages('cats'); // Загружаем изображения по умолчанию\n    renderImages(images);\n  } catch (error) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Failed to load default images. Please try again.',\n      position: 'topRight',\n    });\n  }\n}\n\n// Загрузка изображений по запросу пользователя\nform.addEventListener('submit', async (event) => {\n  event.preventDefault();\n\n  const query = event.target.elements.searchQuery.value.trim();\n  if (!query) {\n    iziToast.warning({\n      title: 'Error',\n      message: 'Please enter a search term!',\n      position: 'topRight',\n    });\n    return;\n  }\n\n  try {\n    const images = await fetchImages(query);\n    renderImages(images);\n  } catch (error) {\n    iziToast.error({\n      title: 'Error',\n      message: 'Failed to load images. Please try again.',\n      position: 'topRight',\n    });\n  }\n});\n\n// Вызываем функцию для загрузки изображений по умолчанию при запуске страницы\nloadDefaultImages();\n\n\n\n\n\n\n"],"names":["API_KEY","BASE_URL","fetchImages","query","response","axios","error","gallery","lightbox","SimpleLightbox","renderImages","images","showErrorMessage","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","form","loadDefaultImages","iziToast","event"],"mappings":"+vBAEA,MAAMA,EAAU,qCACVC,EAAW,2BAEV,eAAeC,EAAYC,EAAO,CACvC,GAAI,CAEF,MAAMC,EAAW,MAAMC,EAAM,IAAIJ,EAAU,CACzC,OAAQ,CACN,IAAKD,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACb,CACP,CAAK,EAKD,OAHA,QAAQ,IAAI,gBAAiBC,CAAQ,EAGjCA,EAAS,KAAK,UAAY,EACrBA,EAAS,KAAK,MAErB,QAAQ,KAAK,kBAAkB,EACxB,CAAE,EAEZ,OAAQE,EAAO,CACd,eAAQ,MAAM,uBAAwBA,CAAK,EACpC,CAAE,CACb,CACA,CC5BA,MAAMC,EAAU,SAAS,cAAc,UAAU,EAE3CC,EAAW,IAAIC,EAAe,aAAc,CAChD,aAAc,MACd,aAAc,GAChB,CAAC,EAEM,SAASC,EAAaC,EAAQ,CAGnC,GAFAJ,EAAQ,UAAY,GAEhBI,EAAO,SAAW,EAAG,CACvBC,EAAkB,EAClB,MACJ,CAEE,MAAMC,EAASF,EAAO,IAAI,CAAC,CAAE,aAAAG,EAAc,cAAAC,EAAe,KAAAC,EAAM,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,UAAAC,CAAS,IAAO;AAAA;AAAA,iBAEzFL,CAAa;AAAA,oBACVD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA,kEAGoBC,CAAK;AAAA,kEACLC,CAAK;AAAA,qEACFC,CAAQ;AAAA,sEACPC,CAAS;AAAA;AAAA;AAAA,GAG5E,EAAE,KAAK,EAAE,EAEVb,EAAQ,UAAYM,EAEpBL,EAAS,QAAO,CAClB,CAEO,SAASI,GAAmB,CACjCL,EAAQ,UAAY;AAAA;AAAA;AAAA;AAAA,GAKtB,CCpCgB,SAAS,cAAc,UAAU,EACjD,MAAMc,EAAO,SAAS,cAAc,cAAc,EAEjC,IAAIZ,EAAe,aAAc,CAChD,aAAc,MACd,aAAc,GAChB,CAAC,EAGD,eAAea,GAAoB,CACjC,GAAI,CACF,MAAMX,EAAS,MAAMT,EAAY,MAAM,EACvCQ,EAAaC,CAAM,CACpB,MAAe,CACdY,EAAS,MAAM,CACb,MAAO,QACP,QAAS,mDACT,SAAU,UAChB,CAAK,CACL,CACA,CAGAF,EAAK,iBAAiB,SAAU,MAAOG,GAAU,CAC/CA,EAAM,eAAgB,EAEtB,MAAMrB,EAAQqB,EAAM,OAAO,SAAS,YAAY,MAAM,KAAM,EAC5D,GAAI,CAACrB,EAAO,CACVoB,EAAS,QAAQ,CACf,MAAO,QACP,QAAS,8BACT,SAAU,UAChB,CAAK,EACD,MACJ,CAEE,GAAI,CACF,MAAMZ,EAAS,MAAMT,EAAYC,CAAK,EACtCO,EAAaC,CAAM,CACpB,MAAe,CACdY,EAAS,MAAM,CACb,MAAO,QACP,QAAS,2CACT,SAAU,UAChB,CAAK,CACL,CACA,CAAC,EAGDD,EAAmB"}